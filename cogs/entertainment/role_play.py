from random import choice

from disnake import Member, ApplicationCommandInteraction, Localized, OptionChoice
from disnake.ext.commands import Param
from loguru import logger

from utils.basic import ChisatoBot
from utils.basic import CogUI, EmbedUI, EmbedErrorUI
from utils.exceptions import DecodeJsonError
from utils.i18n import ChisatoLocalStore

_t = ChisatoLocalStore.load(__file__)

SOLO_OPTIONS = [
    OptionChoice(
        name=Localized(
            "üòÉ –£–ª—ã–±–Ω—É—Ç—å—Å—è",
            data=_t.get("rp.option.action.choice.smile")
        ),
        value="smile"
    ),
    OptionChoice(
        name=Localized(
            "üõå –ó–∞—Å–Ω—É—Ç—å",
            data=_t.get("rp.option.action.choice.sleep")
        ),
        value="sleep"
    ),
    OptionChoice(
        name=Localized(
            "üòÅ –û–±—Ä–∞–¥–æ–≤–∞—Ç—å—Å—è",
            data=_t.get("rp.option.action.choice.happy")
        ),
        value="happy"
    ),
    OptionChoice(
        name=Localized(
            "ü´† –°–∫—É—á–∞—Ç—å",
            data=_t.get("rp.option.action.choice.bored")
        ),
        value="bored"
    ),
    OptionChoice(
        name=Localized(
            "ü•π –ü–ª–∞–∫–∞—Ç—å",
            data=_t.get("rp.option.action.choice.cry")
        ),
        value="cry"
    ),
    OptionChoice(
        name=Localized(
            "ü™© –¢–∞–Ω—Ü–µ–≤–∞—Ç—å",
            data=_t.get("rp.option.action.choice.dance")
        ),
        value="dance"
    ),
    OptionChoice(
        name=Localized(
            "ü´£ –ò—Å–ø—ã—Ç–∞—Ç—å –Ω–µ—É–¥–æ–±—Å—Ç–≤–æ",
            data=_t.get("rp.option.action.choice.facepalm")
        ),
        value="facepalm"
    ),
    OptionChoice(
        name=Localized(
            "üòä –ó–∞—Å—Ç–µ—Å–Ω—è—Ç—å—Å—è",
            data=_t.get("rp.option.action.choice.blush")
        ),
        value="blush"
    ),
    OptionChoice(
        name=Localized(
            "ü§î –î—É–º–∞—Ç—å",
            data=_t.get("rp.option.action.choice.think")
        ),
        value="think"
    )
]

DUO_OPTIONS = [
    OptionChoice(
        name=Localized(
            "ü©∏ –£–∫—É—Å–∏—Ç—å",
            data=_t.get("rp.option.action.choice.bite")
        ),
        value="bite"
    ),
    OptionChoice(
        name=Localized(
            "üçè –ü–æ–∫–æ—Ä–º–∏—Ç—å",
            data=_t.get("rp.option.action.choice.feed")
        ),
        value="feed"
    ),
    OptionChoice(
        name=Localized(
            "ü´≥ –ü–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞ —Ä—É–∫—É",
            data=_t.get("rp.option.action.choice.handhold")
        ),
        value="handhold"
    ),
    OptionChoice(
        name=Localized(
            "ü´∏ –î–∞—Ç—å –ø—è—Ç—å",
            data=_t.get("rp.option.action.choice.highfive")
        ),
        value="highfive"
    ),
    OptionChoice(
        name=Localized(
            "üëä –£–¥–∞—Ä–∏—Ç—å",
            data=_t.get("rp.option.action.choice.kick")
        ),
        value="kick"
    ),
    OptionChoice(
        name=Localized(
            "ü§ó –û–±–Ω—è—Ç—å",
            data=_t.get("rp.option.action.choice.hug")
        ),
        value="hug"
    ),
    OptionChoice(
        name=Localized(
            "üíã –ü–æ—Ü–µ–ª–æ–≤–∞—Ç—å",
            data=_t.get("rp.option.action.choice.kiss")
        ),
        value="kiss"
    ),
    OptionChoice(
        name=Localized(
            "ü´≥ –ü–æ–≥–ª–∞–¥–∏—Ç—å",
            data=_t.get("rp.option.action.choice.pat")
        ),
        value="pat"
    ),
    OptionChoice(
        name=Localized(
            "üî´ –í—ã—Å—Ç—Ä–µ–ª–∏—Ç—å",
            data=_t.get("rp.option.action.choice.shoot")
        ),
        value="shoot"
    ),
    OptionChoice(
        name=Localized(
            "üòä –©–µ–∫–æ—Ç–∞—Ç—å",
            data=_t.get("rp.option.action.choice.tickle")
        ),
        value="tickle"
    ),
    OptionChoice(
        name=Localized(
            "ü´≥ –ü–æ—Ç—Ä–æ–≥–∞—Ç—å",
            data=_t.get("rp.option.action.choice.touch")
        ),
        value="touch"
    ),
    OptionChoice(
        name=Localized(
            "üëã –ü–æ–º–∞—Ö–∞—Ç—å",
            data=_t.get("rp.option.action.choice.wave")
        ),
        value="wave"
    ),
    OptionChoice(
        name=Localized(
            "ü´µ –ë—Ä–æ—Å–∏—Ç—å",
            data=_t.get("rp.option.action.choice.yeet")
        ),
        value="yeet"
    ),
    OptionChoice(
        name=Localized(
            "üòâ –ü–æ–¥–º–∏–≥–Ω—É—Ç—å",
            data=_t.get("rp.option.action.choice.wink")
        ),
        value="wink"
    )
]


class RolePlay(CogUI):

    @staticmethod
    async def get_url(name: str):
        try:
            async with ChisatoBot.from_cache().session.get(
                    f"https://nekos.best/api/v2/{name}"
            ) as response:
                return (await response.json())["results"][0]["url"]
        except Exception as e:
            logger.warning(f"Nekos Best Api threw an exception {type(e).__name__}: {e}")
            raise DecodeJsonError("Neko services returned an error")

    def checks(self, interaction: ApplicationCommandInteraction, member: Member) -> EmbedErrorUI:
        if interaction.author.id == member.id:
            return EmbedErrorUI(
                description=_t.get(
                    key="rp.embed.error.cannot_specify_self", locale=interaction.guild_locale
                ),
                member=interaction.author
            )

        if member.id == self.bot.user.id:
            return EmbedErrorUI(
                description=_t.get(
                    key="rp.embed.error.cannot_specify_bot", locale=interaction.guild_locale
                ),
                member=interaction.author
            )

    @CogUI.slash_command(
        name="roleplay",
        dm_permission=False,
        description=Localized(
            "\uD83C\uDFAD –†–æ–ª–µ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è!",
            data=_t.get("rp.command.description")
        )
    )
    async def _rp(self, interaction: ApplicationCommandInteraction) -> ...:
        ...

    @_rp.sub_command(
        name="duo",
        description=Localized(
            "\uD83C\uDFAD –†–æ–ª–µ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: –í–º–µ—Å—Ç–µ!",
            data=_t.get("rp.command.duo.description")
        )
    )
    async def duo(
            self,
            interaction: ApplicationCommandInteraction,
            member: Member = Param(
                name=Localized("—É—á–∞—Å—Ç–Ω–∏–∫", data=_t.get("rp.option.member.name")),
                description=Localized(
                    "- –≤—ã–±–µ—Ä–∏ —Å –∫–µ–º —Ö–æ—á–µ—à—å —Å–æ–≤–µ—Ä—à–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ",
                    data=_t.get("rp.option.member.description")
                )
            ),
            action: str = Param(
                name=Localized(
                    "–¥–µ–π—Å—Ç–≤–∏–µ",
                    data=_t.get("rp.option.action.name")
                ),
                description=Localized(
                    "- –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å —Å–æ–≤–µ—Ä—à–∏—Ç—å",
                    data=_t.get("rp.option.action.description")
                ),
                choices=DUO_OPTIONS
            )
    ) -> None:
        if embed := self.checks(interaction, member):
            return await interaction.response.send_message(embed=embed, ephemeral=True)

        await interaction.response.send_message(
            embed=EmbedUI(
                description=_t.get(
                    key=f"rp.action.{action}.description",
                    locale=interaction.guild_locale,
                    values=(
                        interaction.author.mention,
                        member.mention
                    )
                )
            ).set_image(
                url=await self.get_url(action)
            ).set_footer(
                text=choice(_t.get(key=f"rp.action.{action}.quote", locale=interaction.guild_locale))
            )
        )

    @_rp.sub_command(
        name="solo",
        description=Localized(
            "\uD83C\uDFAD –†–æ–ª–µ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: –û–¥–∏–Ω–æ—á–Ω—ã–µ!",
            data=_t.get("rp.command.solo.description")
        )
    )
    async def solo(
            self,
            interaction: ApplicationCommandInteraction,
            action: str = Param(
                name=Localized(
                    "–¥–µ–π—Å—Ç–≤–∏–µ",
                    data=_t.get("rp.option.action.name")
                ),
                description=Localized(
                    "- –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å –∫–µ–º-—Ç–æ —Å–æ–≤–µ—Ä—à–∏—Ç—å",
                    data=_t.get("rp.option.action_multiple.description")
                ),
                choices=SOLO_OPTIONS
            )
    ) -> None:
        await interaction.response.send_message(
            embed=EmbedUI(
                description=_t.get(
                    key=f"rp.action.{action}.description",
                    locale=interaction.guild_locale,
                    values=(
                        interaction.author.mention,
                    )
                )
            ).set_image(
                url=await self.get_url(action)
            ).set_footer(
                text=choice(_t.get(key=f"rp.action.{action}.quote", locale=interaction.guild_locale))
            )
        )

    @_rp.sub_command(
        name="custom",
        description=Localized(
            "\uD83C\uDFAD –†–æ–ª–µ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: –°–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ!",
            data=_t.get("rp.command.custom.description")
        )
    )
    async def custom(
            self,
            interaction: ApplicationCommandInteraction,
            action: str = Param(
                name=Localized(
                    "–¥–µ–π—Å—Ç–≤–∏–µ",
                    data=_t.get("rp.option.action.name")
                ),
                description=Localized(
                    "- –Ω–∞–ø–∏—à–∏ –¥–µ–π—Å—Ç–≤–∏–µ (–ø–æ–ø–∏–ª —á–∞—é –∏ —Ç.–ø.)",
                    data=_t.get("rp.option.action_custom.description")
                ),
                max_length=2048
            ),
            image: str = Param(
                name=Localized(
                    "–¥–µ–π—Å—Ç–≤–∏–µ-–Ω–∞-–æ—Å–Ω–æ–≤–µ",
                    data=_t.get("rp.option.action_with.name")
                ),
                description=Localized(
                    "- –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–æ–≤–µ—Ä—à–∏—Ç—å",
                    data=_t.get("rp.option.action_with.description")
                ),
                choices=DUO_OPTIONS + SOLO_OPTIONS
            ),
            quote: str = Param(
                name=Localized(
                    "—Ü–∏—Ç–∞—Ç–∞",
                    data=_t.get("rp.option.quote.name")
                ),
                description=Localized(
                    "- –Ω–∞–ø–∏—à–∏ —Ü–∏—Ç–∞—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å",
                    data=_t.get("- –Ω–∞–ø–∏—à–∏ —Ü–∏—Ç–∞—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å")
                ),
                max_length=1028
            )
    ) -> None:
        await interaction.response.send_message(
            embed=EmbedUI(
                description=f"{interaction.author.mention}, {action}"
            ).set_image(
                url=await self.get_url(image)
            ).set_footer(
                text=quote
            )
        )


def setup(bot: "ChisatoBot") -> None:
    return bot.add_cog(RolePlay(bot))
